 官方介绍文档 （基础）+ 项目实践验证 + 自己阅读源码


synchronized void enqueue(AsyncCall call) {
    // 判断当前正在执行的任务数量，最大是 64 ，正在执行的任务中的 host , 最大是 5
    if (runningAsyncCalls.size() < maxRequests && runningCallsForHost(call) < maxRequestsPerHost) {
    // 加入到正在执行
    runningAsyncCalls.add(call);
    // 线程池，
    executorService().execute(call);
    } else {
    // 加入准备执行的集合，等待执行
    readyAsyncCalls.add(call);
  }
}
    executorService().execute(call);

   将请求Request(url,method(GET,POST),请求头的一些参数,表单提交(contentType,contentLenght)等)
    ---okHttpXlient.newCall(request)--->  封装成一个RealCall对象
    { RealCall对象里面有OkHttpClient对象,Request对象,还有一个拦截器}

    --- call.equeue(){
        clent.dispatcher().enqueue(new AsyncCall(responseCallback)); }
    --->

    AsyncCall 是 RealCall 的内部类(内部类可以访问外部类的成员)，给了 OKhttp 的 Dispatcher
    AsyncCall实现了Runnable,里面的run方法会执行execute方法,RealCall把AsyncCall对象封装好了之后就会放到线程池Dispatcher里面轮询

    如果正在执行的任务数量大于64,或者正在执行的任务是5个,就会进入等待,否则就会进入队列里面执行,
    一旦执行就会调用    AsyncCall.execute()方法，

     最终去了哪里？来了 AsyncCall.execute()方法，

执行 getResponseWithInterceptorChain 返回 Response



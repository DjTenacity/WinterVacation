
1. HTTP状态码：


1xx:  Infomational (信息状态码) ，接收的请求正在处理
2xx:  Succeed(成功)，请求正常处理完毕,如 200
3xx:  Redirection(重定向)，需要进行附加操作，一般是没有响应数据返回的，如 304（Not,modified）307
4xx: Client Error (客户端的错误)，服务器无法处理请求，如 404
5xx: Server Error (服务端的错误)，服务器处理请求出错，如 500

即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL

2.Http 和 Https 的区别：
Https = Http + 加密 + 验证 + 完整


端口：Http (80)  Https (443)


Http 的缺点：
2.1 数据是没有加密传输，可能遭遇窃听
2.2 不验证通信方的身份，可能会遭遇伪装
2.3 无法验证报文的完整性，可能会遭遇篡改


TLS/SSL 协议：
加密：对称加密（AES，DES） + 非对称加密 (RSA，DSA)
证书：要钱（便宜），建立连接的速度会拖慢，TCP  3 次握手，8 次握手


3. Http 1.x 和 Http 2.0 的区别
3.1 Http 2.0 采用二进制格式而非文本格式
3.2 Http 2.0 支持完全的多路复用
3.3 Http 2.0 使用报头压缩，降低开销
3.4 Http 2.0 让服务器将响应主动推送给客户端，（带内容推送，不带内容推送的通知）


4. 异步和同步
跟线程没什么关系，打电话
同步：打电话 -> 处理（没挂断） -> 反馈
异步：打电话 -> 处理（挂断）-> 打回来


5. 整体架构和源码分析
5.1 自己如果要写一个框架你要怎么处理


1. 网络是耗时，开线程，new Thread()   线程池
2. 处理网络，HttpUrlConnection(简单) 或者  输入流+Socket(麻烦)
3. 网络请求头信息处理，缓存的处理，文件格式上次的方式（表单提交，拼格式）
4. 路由的一些操作，Http 2.0 复用 等等


5.2 OkHttp 大致内容 Okio，Socket
okio：   原生的JavaIO + 自定义封装 ，其实就是对于 io 的封装,
        io设计的类和方法太多,在这里就只有source 输入 和sink 输出,
        只需要调用BufferSource和BufferSink就可以

   try {
      // 绑定输入输出 ，操作 Socket 的输入输出流
      source = Okio.buffer(Okio.source(rawSocket));
      sink = Okio.buffer(Okio.sink(rawSocket));
    } catch (NullPointerException npe) {
      if (NPE_THROW_WITH_NULL.equals(npe.getMessage())) {
        throw new IOException(npe);
      }
    }


        HTTPICode就是封装了source和sink就是自己的输入输出流,本质就是操作socket的输入输出流



Socket 连接
拦截器

